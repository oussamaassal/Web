{% extends 'base.html.twig' %}

{% block body %}
    <style>
        .products-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .product-card {
            width: 250px;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
        }

        .product-image img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .product-details {
            padding: 10px;
        }

        .product-name {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .product-description {
            margin-bottom: 10px;
        }

        .product-price {
            font-weight: bold;
            color: #007bff;
            margin-bottom: 10px;
        }

        .btn {
            display: inline-block;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            text-decoration: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .no-records {
            font-size: 18px;
            color: #777;
            margin-top: 20px;
        }
    </style>
    <li class="nav-item d-flex align-items-center">
        <div class="input-group search-area">
            <input type="text" class="form-control" id="searchInput" placeholder="Rechercher ...">
            <span class="input-group-text"><a href="javascript:void(0)"><i class="flaticon-381-search-2"></i></a></span>
        </div>
        <br><br><br><br><br>
    </li>
    <script>
        function filterTable() {
            const filter = document.getElementById('searchInput').value.toUpperCase();
            const products = document.querySelectorAll('.product-card');
            for (let i = 0; i < products.length; i++) {
                const product = products[i];
                const productName = product.querySelector('.product-name').innerText.toUpperCase();
                const productDescription = product.querySelector('.product-description').innerText.toUpperCase();
                if (productName.indexOf(filter) > -1 || productDescription.indexOf(filter) > -1) {
                    product.style.display = '';
                } else {
                    product.style.display = 'none';
                }
            }
        }
        document.getElementById('searchInput').addEventListener('keyup', filterTable);
    </script>
    <a href="{{ path('app_evenement_pdf') }}" class="btn btn-primary">PDF</a>

<a href="{{ path('app_evenement_new') }}" class="btn btn-primary">Create New</a>
<a href="{{ path('all_vote_index') }}" class="btn btn-primary">Votes</a>
<a href="{{ path('app_rdv') }}" class="btn btn-primary">Calendar</a>


    <br>
    <div class="products-container">
        {% for evenement in evenements %}
            <div class="product-card">
                <div class="product-image">
                    <img src="{{ asset('uploads/' ~ evenement.imgepath) }}" alt="Product Image">
                </div>
                <div class="product-details">
                    <h2 class="product-name">{{ evenement.nome }}</h2>
                    <p class="product-description">{{ evenement.postee }}</p>
                    <p class="product-price">Periode : {{ evenement.periodep }}</p>
                    <p class="product-date">Date: {{ evenement.datee|date('Y-m-d') }}</p>
                    <a href="{{ path('app_evenement_edit', {'ide': evenement.ide}) }}" class="btn btn-secondary">Edit</a>
                    <a href="{{ path('app_candidat_index', {'id_event': evenement.ide}) }}" class="btn btn-secondary">Condidats</a>
                    <a href="{{ path('app_candidat_new', {'id_event': evenement.ide}) }}" class="btn btn-secondary">add Condidat</a>
                    <form method="post" action="{{ path('app_evenement_delete', {'ide': evenement.ide}) }}" onsubmit="return confirm('Are you sure you want to delete this item?');">
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ evenement.ide) }}">
                        <button class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        {% else %}
            <div class="no-records">No records found</div>
        {% endfor %}
    </div>



     <canvas id="myChart" width="400" height="400"></canvas>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
    <script>
    // Récupération des données pour le graphique
    let eventNames = [];
    let eventCount = [];

    {% for evenement in evenements %}
        eventNames.push("{{ evenement.nome }}");

        {# let candidateCount = 0;

       {% for candidat in candidats %}
    {% if candidat.idElection.ide == evenement.ide %}
        candidateCount++;
    {% endif %}
{% endfor %} #}


        eventCount.push(1);
    {% endfor %}

    let chartData = {
        labels: eventNames,
        datasets: [{
            label: 'Nombre de candidats',
            data: eventCount,
            backgroundColor: eventNames.map(() => getRandomColor())
        }]
    };

    // Configuration des options du graphique
    let chartOptions = {
        legend: { display: false },
        title: {
            display: true,
            text: "Statistiques des événements par nombre de candidats"
        },
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true,
                    stepSize: 1 // Pour afficher uniquement des nombres entiers
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Nombre de candidats'
                }
            }],
            xAxes: [{
                scaleLabel: {
                    display: true,
                    labelString: 'Nom de l\'événement'
                }
            }]
        }
    };

    // Création du graphique
    let ctx = document.getElementById('myChart').getContext('2d');
    let myChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: chartOptions
    });

    // Fonction pour générer des couleurs aléatoires
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
</script>


{% endblock %}
